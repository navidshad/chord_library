# Steps to deploy the app:
# - Build the Docker image and push it to Docker Hub
# - Deploy the Docker image to EC2 by SSH

name: Deploy To SSH Server

on:
  # push:
  #   branches: ["main"]
  # pull_request:
  #   branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_TAG_SERVER: SERVER-${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Build nuxt app
        run: |
          cd website
          npm install
          npm run build

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build the Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/goranee.ir:${{ env.IMAGE_TAG_SERVER }} -f app.Dockerfile .

      - name: Push the Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/goranee.ir:${{ env.IMAGE_TAG_SERVER }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Copy docker-compose file to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          source: docker-compose.yaml
          target: .
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22

      # Deploy the Docker image to EC2 by SSH
      - name: Deploy the Docker image to EC2 by SSH
        uses: appleboy/ssh-action@master
        env:
          SERVER_IMAGE_NAME: ${{ env.IMAGE_TAG_SERVER }}
          SERVER_ADMIN_EMAIL: ${{ vars.SERVER_ADMIN_EMAIL }}
          SERVER_ADMIN_PASSWORD: ${{ vars.SERVER_ADMIN_PASSWORD }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          envs: SERVER_IMAGE_NAME, SERVER_ADMIN_EMAIL, SERVER_ADMIN_PASSWORD
          script: |
            # Remove the previous version of the app, if exists
            docker-compose down
            # Remove all stoped images
            docker system prune -a --force
            # Up the app
            docker-compose up --remove-orphans -d
