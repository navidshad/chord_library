# Steps to deploy the app:
# - Build the Docker image and push it to Docker Hub
# - Deploy the Docker image to EC2 by SSH

name: Deploy To SSH Server

on:
  push:
      branches: [ "main" ]
  pull_request:
      branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_TAG_SERVER: SERVER-${{ github.sha }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 14
        
      - name: Build nuxt app
        run: |
          cd website
          echo "VUE_APP_BASE_URL=/api/" > .env
          echo "VUE_APP_BASE_URL_ON_SERVER=http://localhost:8081/" >> .env
          npm install
          npm run build

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_SERVER }} -f app.Dockerfile .

      - name: Push the Docker image to GitHub Container Registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_SERVER }}


  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Copy docker-compose file to server
        uses: TwanLuttik/gh-action-scp@master
        with:
          local: docker-compose.yaml
          remote: docker-compose.yaml
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          privateKey: ${{ secrets.SSH_KEY }}
      

      - name: Fetch the Docker images from server
        uses: appleboy/ssh-action@master
        env:
          SERVER_IMAGE_NAME: ${{ env.IMAGE_TAG_SERVER }}
          SERVER_ADMIN_EMAIL: ${{ vars.SERVER_ADMIN_EMAIL }}
          SERVER_ADMIN_PASSWORD: ${{ vars.SERVER_ADMIN_PASSWORD }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: SERVER_IMAGE_NAME, SERVER_ADMIN_EMAIL, SERVER_ADMIN_PASSWORD
          script: |
            # Remove the previous version of the app, if exists
            docker-compose down
            # Remove all stoped images
            docker system prune -a --force
            # Up the app
            docker-compose up --remove-orphans -d
